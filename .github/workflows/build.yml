name: üöÄ Build and Release

on:
  push:
    branches: [ master ]
    paths: 
      - '.version'
      - 'Dockerfile.flyway'
      - 'Dockerfile'
      - 'migrations/**'
      - '.github/workflows/build.yml'
      - 'go.mod'
      - 'go.sum'
      - 'program.go'
      - 'sources/**'
      - 'markdownify.c'
      - 'markdownify.h'
  pull_request:
    branches: [ master ]
    paths:
      - 'Dockerfile'
      - 'Dockerfile.flyway'
      - 'migrations/**'
      - '.github/workflows/build.yml'
      - 'go.mod'
      - 'go.sum'
      - 'program.go'
      - 'sources/**'
      - 'markdownify.c'
      - 'markdownify.h'

permissions:
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  ORG: mairwunnx
  FLYWAY_IMAGE: xi-flyway
  XIM_IMAGE: ximanager
  PLATFORMS: linux/amd64

jobs:
  version-check:
    name: üîç Check Version Changes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-changed: ${{ steps.version-changed.outputs.changed }}
      should-release: ${{ steps.should-release.outputs.release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Get current version
        id: version
        run: |
          VERSION=$(cat .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Current version: $VERSION"
      - name: Check if version changed
        id: version-changed
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "^.version$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version file changed"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Version file not changed"
          fi
      - name: Should we release?
        id: should-release
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" && "${{ steps.version-changed.outputs.changed }}" == "true" ]]; then
            echo "release=true" >> $GITHUB_OUTPUT
            echo "üöÄ Will create release and push image"
          else
            echo "release=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping release (not master or version not changed)"
          fi

  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      flyway: ${{ steps.filter.outputs.flyway }}
      ximanager: ${{ steps.filter.outputs.ximanager }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            flyway:
              - '.version'
              - 'Dockerfile.flyway'
              - 'migrations/**'
            ximanager:
              - '.version'
              - 'Dockerfile'
              - 'go.mod'
              - 'go.sum'
              - 'program.go'
              - 'sources/**'
              - 'markdownify.c'
              - 'markdownify.h'

  pr-check:
    name: üß™ PR Build Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Flyway image (PR check)
        if: needs.changes.outputs.flyway == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.flyway
          platforms: ${{ env.PLATFORMS }}
          push: false
          tags: ${{ env.FLYWAY_IMAGE }}:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build Xi Manager image (PR check)
        if: needs.changes.outputs.ximanager == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: false
          tags: ${{ env.XIM_IMAGE }}:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build success
        run: |
          echo "‚úÖ Docker –æ–±—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è PR #${{ github.event.number }}"

  build-flyway:
    name: üî® Build & push (Flyway)
    needs: [changes, version-check]
    if: needs.changes.outputs.flyway == 'true' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Meta (flyway)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.FLYWAY_IMAGE }}
          tags: |
            type=raw,value=latest,enable=true
            type=raw,value=${{ needs.version-check.outputs.version }},enable=${{ needs.version-check.outputs.version-changed == 'true' }}
            type=sha,prefix=sha-,format=short
            type=ref,event=branch

      - name: Build & Push (flyway)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.flyway
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ needs.version-check.outputs.version-changed == 'true' }}

  build-ximanager:
    name: üî® Build & push (ximanager)
    needs: [changes, version-check]
    if: needs.changes.outputs.ximanager == 'true' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Meta (ximanager)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.XIM_IMAGE }}
          tags: |
            type=raw,value=latest,enable=true
            type=raw,value=${{ needs.version-check.outputs.version }},enable=${{ needs.version-check.outputs.version-changed == 'true' }}
            type=sha,prefix=sha-,format=short
            type=ref,event=branch

      - name: Build & Push (ximanager)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ needs.version-check.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ needs.version-check.outputs.version-changed == 'true' }}

  release:
    name: üìã Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-check, build-flyway, build-ximanager]
    if: needs.version-check.outputs.should-release == 'true' && (needs.build-flyway.result == 'success' || needs.build-flyway.result == 'skipped') && (needs.build-ximanager.result == 'success' || needs.build-ximanager.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          release_name: ü§ñ Xi Manager v${{ needs.version-check.outputs.version }}
          body: |
            ## üöÄ Xi Manager v${{ needs.version-check.outputs.version }}
            
            ### üì¶ Docker Images
            ```bash
            # Xi Manager
            docker pull ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.XIM_IMAGE }}:${{ needs.version-check.outputs.version }}
            docker pull ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.XIM_IMAGE }}:latest
            
            # Flyway Migrations
            docker pull ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.FLYWAY_IMAGE }}:${{ needs.version-check.outputs.version }}
            docker pull ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.FLYWAY_IMAGE }}:latest
            ```
          draft: false
          prerelease: false