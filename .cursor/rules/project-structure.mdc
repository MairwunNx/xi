---
alwaysApply: true
---

# Xi Manager - Project Structure üìÅ

## Root Structure

### Main Files
- **Entry Point**: [program.go](mdc:program.go) ‚Äì Initialization and launch of the Uber-Fx application  
- **Configuration**: [go.mod](mdc:go.mod), [go.sum](mdc:go.sum) ‚Äì Go module dependencies  
- **Docker**: [Dockerfile](mdc:Dockerfile), [docker-compose.yaml](mdc:docker-compose.yaml) ‚Äì Containerization  

### Sources/ Modules

#### artificial/ (`sources/artificial/`)
- **Purpose**: Integration with various AI models and services  
- **Key Files**:  
  - [config.go](mdc:sources/artificial/config.go) ‚Äì AI providers configuration  
  - [openai.go](mdc:sources/artificial/openai.go) ‚Äì OpenAI API integration  
  - [openrouter.go](mdc:sources/artificial/openrouter.go) ‚Äì OpenRouter integration  
  - [vision.go](mdc:sources/artificial/vision.go) ‚Äì Image processing  
  - [whisper.go](mdc:sources/artificial/whisper.go) ‚Äì Speech-to-text conversion  
  - [context.go](mdc:sources/artificial/context.go) ‚Äì AI context management  

#### external/ (`sources/external/`)
- **Purpose**: Integrations with external non-AI services  
- **Structure**: Configurations and implementations of external integrations  

#### network/ (`sources/network/`)
- **Purpose**: General-purpose HTTP client and networking utilities  
- **Key Files**:  
  - [client.go](mdc:sources/network/client.go) ‚Äì HTTP client  
  - [config.go](mdc:sources/network/config.go) ‚Äì Network configuration  

#### persistence/ (`sources/persistence/`)
- **Purpose**: Data persistence layer  
- **Structure**:  
  - [database.go](mdc:sources/persistence/database.go) ‚Äì PostgreSQL connection  
  - [redis.go](mdc:sources/persistence/redis.go) ‚Äì Redis connection  
  - [entities/](mdc:sources/persistence/entities/) ‚Äì GORM models  
  - [gormdao/](mdc:sources/persistence/gormdao/) ‚Äì Generated DAO objects  
  - [gormgen/](mdc:sources/persistence/gormgen/) ‚Äì GORM DAO generator  

#### repository/ (`sources/repository/`)
- **Purpose**: Repository pattern for abstracting data access  
- **Key Files**:  
  - [users.go](mdc:sources/repository/users.go) ‚Äì User repository  
  - [messages.go](mdc:sources/repository/messages.go) ‚Äì Message repository  
  - [modes.go](mdc:sources/repository/modes.go) ‚Äì Modes repository  
  - [usage.go](mdc:sources/repository/usage.go) ‚Äì Usage statistics repository  

#### telegram/ (`sources/telegram/`)
- **Purpose**: Logic related to the Telegram Bot API  
- **Key Files**:  
  - [handler.go](mdc:sources/telegram/handler.go) ‚Äì Main message handler  
  - [commands.go](mdc:sources/telegram/commands.go) ‚Äì Bot commands implementation  
  - [poller.go](mdc:sources/telegram/poller.go) ‚Äì Telegram update polling  
  - [botapi.go](mdc:sources/telegram/botapi.go) ‚Äì Telegram Bot API wrapper  

#### texting/ (`sources/texting/`)
- **Purpose**: Utilities for text processing  
- **Functions**: Markdown processing, token counting, text formatting, chunking  

#### throttler/ (`sources/throttler/`)
- **Purpose**: User request rate limiting  
- **Functions**: Rate limiting, spam protection  

#### platform/ (`sources/platform/`)
- **Purpose**: Core utilities, custom types, and environment management  
- **Key Files**:  
  - [types.go](mdc:sources/platform/types.go) ‚Äì Custom types  
  - [environ.go](mdc:sources/platform/environ.go) ‚Äì Environment variables  
  - [functions.go](mdc:sources/platform/functions.go) ‚Äì Utility functions  

#### tracing/ (`sources/tracing/`)
- **Purpose**: Structured logging and tracing  
- **Functions**: slog configuration, monitoring, debugging  

### Database Migrations (`migrations/`)
- **Purpose**: SQL scripts for database schema migrations  
- **Structure**: Versioned migrations from V1 to V16  
- **Key Migrations**:  
  - [V1__initial_schema.sql](mdc:migrations/V1__initial_schema.sql) ‚Äì Initial schema  
  - [V3__create_users_table.sql](mdc:migrations/V3__create_users_table.sql) ‚Äì Users table  
  - [V14__create_usage_table.sql](mdc:migrations/V14__create_usage_table.sql) ‚Äì Usage statistics table  

### Configurations (`configurations/`)
- **Purpose**: Configuration files for external services  
- **Contents**: Configuration for Prometheus, Grafana, and other monitoring tools  

## Architectural Principles of the Structure
- **Modularity**: Each module is responsible for a specific functionality  
- **Separation of Concerns**: Clear boundaries between application layers  
- **Dependency Injection**: Uber-Fx used to manage module dependencies  
- **Code Generation**: GORM-gen used for automatic DAO generation  