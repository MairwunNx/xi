---
globs: *.c,*.h
---

# C Source and Header Files Rules ðŸ”§

## Core Principles
- Follow **C99** or later for consistency and portability.
- Write clear, self-documenting code with descriptive names.
- Keep code modular and maintainable.
- Prioritize portability across compilers and platforms.

## Coding Style

### Naming
- **Functions**: `snake_case` (e.g., `process_message`, `init_config`)
- **Variables**: `snake_case` (e.g., `user_count`, `buffer_size`)
- **Constants & Macros**: `UPPER_SNAKE_CASE` (e.g., `MAX_BUFFER_SIZE`, `ARRAY_SIZE`)
- **Types / Structs**: `snake_case` with `_t` suffix (e.g., `config_t`, `node_t`)

### Formatting
- Indentation: 4 spaces, no tabs.
- Braces: consistent project-wide style (K&R or Allman).
- Max line length: 120â€“150 chars (avoid unreadable long lines).
- One statement per line, one declaration per line.

## Header Files (.h)
- Always use **include guards** or `#pragma once` (guards preferred for portability).
- Keep headers minimal: only function prototypes, types, macros, extern variables.
- Do not include unnecessary headers; use forward declarations where possible.
- Organize headers logically: system headers first, then project headers.

## Source Files (.c)
**Recommended order:**
1. System headers  
2. Project headers  
3. Local constants and macros  
4. Type definitions  
5. Static function prototypes  
6. Global/public functions  
7. Static/local function definitions  

## Memory Management
- Always check `malloc`/`calloc`/`realloc` return values.
- Free all allocated memory; set pointers to `NULL` after `free`.
- Prefer `calloc` over `malloc + memset`.
- Minimize manual memory management where possible.

## Error Handling
- Return `0` for success, negative values for errors, positive for special states.
- Use `errno` or project-wide error codes for clarity.
- Fail fast with clear messages in critical conditions.

## Best Practices
- Use `const` for parameters that should not be modified.
- Prefer `static` for internal linkage functions and variables.
- Avoid global variables; prefer passing context structures.
- Check array bounds explicitly.
- Initialize variables at declaration.
- Use `typedef` only for complex or opaque types.
- Keep functions short and focused (single responsibility).

## Project-Specific (Xi Manager / CGO)
- When used with Go (CGO):
  - Follow CGO naming and memory management conventions.
  - Use `extern "C"` for C++ compatibility.
  - Handle UTF-8 strings correctly (convert or validate).