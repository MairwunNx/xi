#!/bin/bash

set -e

REPO_DIR=$(find . -maxdepth 2 -type d -name "xi" | head -1)

if [ -z "$REPO_DIR" ]; then
    REPO_DIR="${1:-$(pwd)}"
fi

BRANCH="master"
LOG_FILE="/var/log/ximanager-autodeploy.log"

if [ -f "$REPO_DIR/.env" ]; then
    echo "üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞..."
    export $(grep -v '^#' "$REPO_DIR/.env" | grep -v '^$' | xargs)
    echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
else
    echo "‚ÑπÔ∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
fi

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" | sudo tee -a "$LOG_FILE"
}

log "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π Xi Manager..."

cd "$REPO_DIR" || {
    log "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $REPO_DIR"
    exit 1
}

if ! git status &>/dev/null; then
    log "‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
    exit 1
fi

CURRENT_COMMIT=$(git rev-parse HEAD)
log "üìç –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: $CURRENT_COMMIT"

log "‚¨áÔ∏è –ü—É–ª–ª–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
if git pull origin "$BRANCH"; then
    NEW_COMMIT=$(git rev-parse HEAD)
    log "üìç –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç: $NEW_COMMIT"
    
    if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
        log "üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π..."
        
        MIGRATION_BACKUP=""
        if [ -n "$MAGIC_PROMPT" ]; then
            log "üîß –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º magic prompt –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            
						mkdir -p .backup
            MIGRATION_BACKUP=".backup/V4__create_modes_tables.sql"
            cp migrations/V4__create_modes_tables.sql "$MIGRATION_BACKUP"
            
            python3 -c "
import os
import base64

# –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ base64 MAGIC_PROMPT
encoded_prompt = os.environ.get('MAGIC_PROMPT', '')

if encoded_prompt:
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
        decoded_prompt = base64.b64decode(encoded_prompt).decode('utf-8')
        print(f'üîì MAGIC_PROMPT —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∏–∑ base64 (–¥–ª–∏–Ω–∞: {len(decoded_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è MAGIC_PROMPT –∏–∑ base64: {e}')
        decoded_prompt = '{{magic_prompt}}'
else:
    decoded_prompt = '{{magic_prompt}}'

with open('migrations/V4__create_modes_tables.sql', 'r') as f:
    content = f.read()

content = content.replace('{{magic_prompt}}', decoded_prompt)

with open('migrations/V4__create_modes_tables.sql', 'w') as f:
    f.write(content)
"
            
            log "‚úÖ Magic prompt –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω"
        else
            log "‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MAGIC_PROMPT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder"
        fi
        
        restore_backup() {
            if [ -n "$MIGRATION_BACKUP" ] && [ -f "$MIGRATION_BACKUP" ]; then
                log "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é..."
                mv "$MIGRATION_BACKUP" migrations/V4__create_modes_tables.sql
                log "‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            fi
        }
        
        if ./.envup.sh; then
            log "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
            
            restore_backup

            if [ -n "$DEPLOY_BOT_TOKEN" ] && [ -n "$DEPLOY_CHAT_ID" ]; then
                log "üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram..."
                COMMIT_SHORT=$(echo "$NEW_COMMIT" | cut -c1-8)
                TELEGRAM_MESSAGE="üéâ <b>Xi Manager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>%0A%0Aüî• <b>–î–µ—Ç–∞–ª–∏ –¥–µ–ø–ª–æ—è:</b>%0Aüìç –ö–æ–º–º–∏—Ç: <code>$COMMIT_SHORT</code>%0Aüåø –í–µ—Ç–∫–∞: <code>$BRANCH</code>%0A‚è∞ –í—Ä–µ–º—è: <code>$(date '+%Y-%m-%d %H:%M:%S')</code>%0Aüñ•Ô∏è –°–µ—Ä–≤–µ—Ä: <code>$(hostname)</code>%0A%0A‚úÖ <i>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</i>"
                
                if curl -s -X POST "https://api.telegram.org/bot$DEPLOY_BOT_TOKEN/sendMessage" \
                     -d "chat_id=$DEPLOY_CHAT_ID" \
                     -d "text=$TELEGRAM_MESSAGE" \
                     -d "parse_mode=HTML" > /dev/null; then
                    log "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                else
                    log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"
                fi
            else
                log "‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN –∏–ª–∏ DEPLOY_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            fi
        else
            log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ!"
            
            restore_backup

            if [ -n "$DEPLOY_BOT_TOKEN" ] && [ -n "$DEPLOY_CHAT_ID" ]; then
                COMMIT_SHORT=$(echo "$NEW_COMMIT" | cut -c1-8)
                ERROR_MESSAGE="üö® <b>–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è Xi Manager!</b>%0A%0Aüí• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:</b>%0Aüìç –ö–æ–º–º–∏—Ç: <code>$COMMIT_SHORT</code>%0Aüåø –í–µ—Ç–∫–∞: <code>$BRANCH</code>%0A‚è∞ –í—Ä–µ–º—è: <code>$(date '+%Y-%m-%d %H:%M:%S')</code>%0Aüñ•Ô∏è –°–µ—Ä–≤–µ—Ä: <code>$(hostname)</code>%0A%0A‚ö†Ô∏è <i>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ</i>%0Aüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: <code>$LOG_FILE</code>"
                curl -s -X POST "https://api.telegram.org/bot$DEPLOY_BOT_TOKEN/sendMessage" \
                     -d "chat_id=$DEPLOY_CHAT_ID" \
                     -d "text=$ERROR_MESSAGE" > /dev/null || true
            fi
            exit 1
        fi
    else
        log "‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    fi
else
    log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–ª–ª–∏–Ω–≥–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    exit 1
fi

log "üèÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω" 