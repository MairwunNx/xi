// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ximanager/sources/persistence/entities"
)

func newUsage(db *gorm.DB, opts ...gen.DOOption) usage {
	_usage := usage{}

	_usage.usageDo.UseDB(db, opts...)
	_usage.usageDo.UseModel(&entities.Usage{})

	tableName := _usage.usageDo.TableName()
	_usage.ALL = field.NewAsterisk(tableName)
	_usage.ID = field.NewField(tableName, "id")
	_usage.UserID = field.NewField(tableName, "user_id")
	_usage.Cost = field.NewField(tableName, "cost")
	_usage.Tokens = field.NewInt(tableName, "tokens")
	_usage.ChatID = field.NewInt64(tableName, "chat_id")
	_usage.CreatedAt = field.NewTime(tableName, "created_at")
	_usage.User = usageHasOneUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entities.User"),
		Messages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Messages", "entities.Message"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Messages.User", "entities.User"),
			},
		},
		Donations: struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Donations", "entities.Donation"),
			UserEntity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Donations.UserEntity", "entities.User"),
			},
		},
		CreatedModes: struct {
			field.RelationField
			Creator struct {
				field.RelationField
			}
			SelectedModes struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("User.CreatedModes", "entities.Mode"),
			Creator: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.CreatedModes.Creator", "entities.User"),
			},
			SelectedModes: struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("User.CreatedModes.SelectedModes", "entities.SelectedMode"),
				Mode: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.Mode", "entities.Mode"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.User", "entities.User"),
				},
			},
		},
		SelectedModes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.SelectedModes", "entities.SelectedMode"),
		},
		Pins: struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Pins", "entities.Pin"),
			UserEntity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Pins.UserEntity", "entities.User"),
			},
		},
		Usages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Usages", "entities.Usage"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Usages.User", "entities.User"),
			},
		},
	}

	_usage.fillFieldMap()

	return _usage
}

type usage struct {
	usageDo usageDo

	ALL       field.Asterisk
	ID        field.Field
	UserID    field.Field
	Cost      field.Field
	Tokens    field.Int
	ChatID    field.Int64
	CreatedAt field.Time
	User      usageHasOneUser

	fieldMap map[string]field.Expr
}

func (u usage) Table(newTableName string) *usage {
	u.usageDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usage) As(alias string) *usage {
	u.usageDo.DO = *(u.usageDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usage) updateTableName(table string) *usage {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewField(table, "id")
	u.UserID = field.NewField(table, "user_id")
	u.Cost = field.NewField(table, "cost")
	u.Tokens = field.NewInt(table, "tokens")
	u.ChatID = field.NewInt64(table, "chat_id")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *usage) WithContext(ctx context.Context) IUsageDo { return u.usageDo.WithContext(ctx) }

func (u usage) TableName() string { return u.usageDo.TableName() }

func (u usage) Alias() string { return u.usageDo.Alias() }

func (u usage) Columns(cols ...field.Expr) gen.Columns { return u.usageDo.Columns(cols...) }

func (u *usage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usage) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["cost"] = u.Cost
	u.fieldMap["tokens"] = u.Tokens
	u.fieldMap["chat_id"] = u.ChatID
	u.fieldMap["created_at"] = u.CreatedAt

}

func (u usage) clone(db *gorm.DB) usage {
	u.usageDo.ReplaceConnPool(db.Statement.ConnPool)
	u.User.db = db.Session(&gorm.Session{Initialized: true})
	u.User.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u usage) replaceDB(db *gorm.DB) usage {
	u.usageDo.ReplaceDB(db)
	u.User.db = db.Session(&gorm.Session{})
	return u
}

type usageHasOneUser struct {
	db *gorm.DB

	field.RelationField

	Messages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Donations struct {
		field.RelationField
		UserEntity struct {
			field.RelationField
		}
	}
	CreatedModes struct {
		field.RelationField
		Creator struct {
			field.RelationField
		}
		SelectedModes struct {
			field.RelationField
			Mode struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
	}
	SelectedModes struct {
		field.RelationField
	}
	Pins struct {
		field.RelationField
		UserEntity struct {
			field.RelationField
		}
	}
	Usages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a usageHasOneUser) Where(conds ...field.Expr) *usageHasOneUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a usageHasOneUser) WithContext(ctx context.Context) *usageHasOneUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a usageHasOneUser) Session(session *gorm.Session) *usageHasOneUser {
	a.db = a.db.Session(session)
	return &a
}

func (a usageHasOneUser) Model(m *entities.Usage) *usageHasOneUserTx {
	return &usageHasOneUserTx{a.db.Model(m).Association(a.Name())}
}

func (a usageHasOneUser) Unscoped() *usageHasOneUser {
	a.db = a.db.Unscoped()
	return &a
}

type usageHasOneUserTx struct{ tx *gorm.Association }

func (a usageHasOneUserTx) Find() (result *entities.User, err error) {
	return result, a.tx.Find(&result)
}

func (a usageHasOneUserTx) Append(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a usageHasOneUserTx) Replace(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a usageHasOneUserTx) Delete(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a usageHasOneUserTx) Clear() error {
	return a.tx.Clear()
}

func (a usageHasOneUserTx) Count() int64 {
	return a.tx.Count()
}

func (a usageHasOneUserTx) Unscoped() *usageHasOneUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type usageDo struct{ gen.DO }

type IUsageDo interface {
	gen.SubQuery
	Debug() IUsageDo
	WithContext(ctx context.Context) IUsageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsageDo
	WriteDB() IUsageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsageDo
	Not(conds ...gen.Condition) IUsageDo
	Or(conds ...gen.Condition) IUsageDo
	Select(conds ...field.Expr) IUsageDo
	Where(conds ...gen.Condition) IUsageDo
	Order(conds ...field.Expr) IUsageDo
	Distinct(cols ...field.Expr) IUsageDo
	Omit(cols ...field.Expr) IUsageDo
	Join(table schema.Tabler, on ...field.Expr) IUsageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsageDo
	Group(cols ...field.Expr) IUsageDo
	Having(conds ...gen.Condition) IUsageDo
	Limit(limit int) IUsageDo
	Offset(offset int) IUsageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsageDo
	Unscoped() IUsageDo
	Create(values ...*entities.Usage) error
	CreateInBatches(values []*entities.Usage, batchSize int) error
	Save(values ...*entities.Usage) error
	First() (*entities.Usage, error)
	Take() (*entities.Usage, error)
	Last() (*entities.Usage, error)
	Find() ([]*entities.Usage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Usage, err error)
	FindInBatches(result *[]*entities.Usage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.Usage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsageDo
	Assign(attrs ...field.AssignExpr) IUsageDo
	Joins(fields ...field.RelationField) IUsageDo
	Preload(fields ...field.RelationField) IUsageDo
	FirstOrInit() (*entities.Usage, error)
	FirstOrCreate() (*entities.Usage, error)
	FindByPage(offset int, limit int) (result []*entities.Usage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usageDo) Debug() IUsageDo {
	return u.withDO(u.DO.Debug())
}

func (u usageDo) WithContext(ctx context.Context) IUsageDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usageDo) ReadDB() IUsageDo {
	return u.Clauses(dbresolver.Read)
}

func (u usageDo) WriteDB() IUsageDo {
	return u.Clauses(dbresolver.Write)
}

func (u usageDo) Session(config *gorm.Session) IUsageDo {
	return u.withDO(u.DO.Session(config))
}

func (u usageDo) Clauses(conds ...clause.Expression) IUsageDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usageDo) Returning(value interface{}, columns ...string) IUsageDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usageDo) Not(conds ...gen.Condition) IUsageDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usageDo) Or(conds ...gen.Condition) IUsageDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usageDo) Select(conds ...field.Expr) IUsageDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usageDo) Where(conds ...gen.Condition) IUsageDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usageDo) Order(conds ...field.Expr) IUsageDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usageDo) Distinct(cols ...field.Expr) IUsageDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usageDo) Omit(cols ...field.Expr) IUsageDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usageDo) Join(table schema.Tabler, on ...field.Expr) IUsageDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsageDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usageDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsageDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usageDo) Group(cols ...field.Expr) IUsageDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usageDo) Having(conds ...gen.Condition) IUsageDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usageDo) Limit(limit int) IUsageDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usageDo) Offset(offset int) IUsageDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsageDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usageDo) Unscoped() IUsageDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usageDo) Create(values ...*entities.Usage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usageDo) CreateInBatches(values []*entities.Usage, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usageDo) Save(values ...*entities.Usage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usageDo) First() (*entities.Usage, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Usage), nil
	}
}

func (u usageDo) Take() (*entities.Usage, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Usage), nil
	}
}

func (u usageDo) Last() (*entities.Usage, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Usage), nil
	}
}

func (u usageDo) Find() ([]*entities.Usage, error) {
	result, err := u.DO.Find()
	return result.([]*entities.Usage), err
}

func (u usageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Usage, err error) {
	buf := make([]*entities.Usage, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usageDo) FindInBatches(result *[]*entities.Usage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usageDo) Attrs(attrs ...field.AssignExpr) IUsageDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usageDo) Assign(attrs ...field.AssignExpr) IUsageDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usageDo) Joins(fields ...field.RelationField) IUsageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usageDo) Preload(fields ...field.RelationField) IUsageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usageDo) FirstOrInit() (*entities.Usage, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Usage), nil
	}
}

func (u usageDo) FirstOrCreate() (*entities.Usage, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Usage), nil
	}
}

func (u usageDo) FindByPage(offset int, limit int) (result []*entities.Usage, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usageDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usageDo) Delete(models ...*entities.Usage) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usageDo) withDO(do gen.Dao) *usageDo {
	u.DO = *do.(*gen.DO)
	return u
}
