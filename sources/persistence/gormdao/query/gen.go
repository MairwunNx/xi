// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Ban          *ban
	Donation     *donation
	Message      *message
	Mode         *mode
	Pin          *pin
	SelectedMode *selectedMode
	Usage        *usage
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Ban = &Q.Ban
	Donation = &Q.Donation
	Message = &Q.Message
	Mode = &Q.Mode
	Pin = &Q.Pin
	SelectedMode = &Q.SelectedMode
	Usage = &Q.Usage
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Ban:          newBan(db, opts...),
		Donation:     newDonation(db, opts...),
		Message:      newMessage(db, opts...),
		Mode:         newMode(db, opts...),
		Pin:          newPin(db, opts...),
		SelectedMode: newSelectedMode(db, opts...),
		Usage:        newUsage(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Ban          ban
	Donation     donation
	Message      message
	Mode         mode
	Pin          pin
	SelectedMode selectedMode
	Usage        usage
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Ban:          q.Ban.clone(db),
		Donation:     q.Donation.clone(db),
		Message:      q.Message.clone(db),
		Mode:         q.Mode.clone(db),
		Pin:          q.Pin.clone(db),
		SelectedMode: q.SelectedMode.clone(db),
		Usage:        q.Usage.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Ban:          q.Ban.replaceDB(db),
		Donation:     q.Donation.replaceDB(db),
		Message:      q.Message.replaceDB(db),
		Mode:         q.Mode.replaceDB(db),
		Pin:          q.Pin.replaceDB(db),
		SelectedMode: q.SelectedMode.replaceDB(db),
		Usage:        q.Usage.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Ban          IBanDo
	Donation     IDonationDo
	Message      IMessageDo
	Mode         IModeDo
	Pin          IPinDo
	SelectedMode ISelectedModeDo
	Usage        IUsageDo
	User         IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Ban:          q.Ban.WithContext(ctx),
		Donation:     q.Donation.WithContext(ctx),
		Message:      q.Message.WithContext(ctx),
		Mode:         q.Mode.WithContext(ctx),
		Pin:          q.Pin.WithContext(ctx),
		SelectedMode: q.SelectedMode.WithContext(ctx),
		Usage:        q.Usage.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
