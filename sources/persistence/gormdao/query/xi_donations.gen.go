// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ximanager/sources/persistence/entities"
)

func newDonation(db *gorm.DB, opts ...gen.DOOption) donation {
	_donation := donation{}

	_donation.donationDo.UseDB(db, opts...)
	_donation.donationDo.UseModel(&entities.Donation{})

	tableName := _donation.donationDo.TableName()
	_donation.ALL = field.NewAsterisk(tableName)
	_donation.ID = field.NewField(tableName, "id")
	_donation.UserID = field.NewField(tableName, "user_id")
	_donation.Sum = field.NewField(tableName, "sum")
	_donation.CreatedAt = field.NewTime(tableName, "created_at")
	_donation.User = donationHasOneUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entities.User"),
		Messages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Messages", "entities.Message"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Messages.User", "entities.User"),
			},
		},
		Donations: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Donations", "entities.Donation"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Donations.User", "entities.User"),
			},
		},
		CreatedModes: struct {
			field.RelationField
			Creator struct {
				field.RelationField
			}
			SelectedModes struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("User.CreatedModes", "entities.Mode"),
			Creator: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.CreatedModes.Creator", "entities.User"),
			},
			SelectedModes: struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("User.CreatedModes.SelectedModes", "entities.SelectedMode"),
				Mode: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.Mode", "entities.Mode"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.User", "entities.User"),
				},
			},
		},
		SelectedModes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.SelectedModes", "entities.SelectedMode"),
		},
	}

	_donation.fillFieldMap()

	return _donation
}

type donation struct {
	donationDo donationDo

	ALL       field.Asterisk
	ID        field.Field
	UserID    field.Field
	Sum       field.Field
	CreatedAt field.Time
	User      donationHasOneUser

	fieldMap map[string]field.Expr
}

func (d donation) Table(newTableName string) *donation {
	d.donationDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d donation) As(alias string) *donation {
	d.donationDo.DO = *(d.donationDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *donation) updateTableName(table string) *donation {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewField(table, "id")
	d.UserID = field.NewField(table, "user_id")
	d.Sum = field.NewField(table, "sum")
	d.CreatedAt = field.NewTime(table, "created_at")

	d.fillFieldMap()

	return d
}

func (d *donation) WithContext(ctx context.Context) IDonationDo { return d.donationDo.WithContext(ctx) }

func (d donation) TableName() string { return d.donationDo.TableName() }

func (d donation) Alias() string { return d.donationDo.Alias() }

func (d donation) Columns(cols ...field.Expr) gen.Columns { return d.donationDo.Columns(cols...) }

func (d *donation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *donation) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["sum"] = d.Sum
	d.fieldMap["created_at"] = d.CreatedAt

}

func (d donation) clone(db *gorm.DB) donation {
	d.donationDo.ReplaceConnPool(db.Statement.ConnPool)
	d.User.db = db.Session(&gorm.Session{Initialized: true})
	d.User.db.Statement.ConnPool = db.Statement.ConnPool
	return d
}

func (d donation) replaceDB(db *gorm.DB) donation {
	d.donationDo.ReplaceDB(db)
	d.User.db = db.Session(&gorm.Session{})
	return d
}

type donationHasOneUser struct {
	db *gorm.DB

	field.RelationField

	Messages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Donations struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	CreatedModes struct {
		field.RelationField
		Creator struct {
			field.RelationField
		}
		SelectedModes struct {
			field.RelationField
			Mode struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
	}
	SelectedModes struct {
		field.RelationField
	}
}

func (a donationHasOneUser) Where(conds ...field.Expr) *donationHasOneUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a donationHasOneUser) WithContext(ctx context.Context) *donationHasOneUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a donationHasOneUser) Session(session *gorm.Session) *donationHasOneUser {
	a.db = a.db.Session(session)
	return &a
}

func (a donationHasOneUser) Model(m *entities.Donation) *donationHasOneUserTx {
	return &donationHasOneUserTx{a.db.Model(m).Association(a.Name())}
}

func (a donationHasOneUser) Unscoped() *donationHasOneUser {
	a.db = a.db.Unscoped()
	return &a
}

type donationHasOneUserTx struct{ tx *gorm.Association }

func (a donationHasOneUserTx) Find() (result *entities.User, err error) {
	return result, a.tx.Find(&result)
}

func (a donationHasOneUserTx) Append(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a donationHasOneUserTx) Replace(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a donationHasOneUserTx) Delete(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a donationHasOneUserTx) Clear() error {
	return a.tx.Clear()
}

func (a donationHasOneUserTx) Count() int64 {
	return a.tx.Count()
}

func (a donationHasOneUserTx) Unscoped() *donationHasOneUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type donationDo struct{ gen.DO }

type IDonationDo interface {
	gen.SubQuery
	Debug() IDonationDo
	WithContext(ctx context.Context) IDonationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDonationDo
	WriteDB() IDonationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDonationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDonationDo
	Not(conds ...gen.Condition) IDonationDo
	Or(conds ...gen.Condition) IDonationDo
	Select(conds ...field.Expr) IDonationDo
	Where(conds ...gen.Condition) IDonationDo
	Order(conds ...field.Expr) IDonationDo
	Distinct(cols ...field.Expr) IDonationDo
	Omit(cols ...field.Expr) IDonationDo
	Join(table schema.Tabler, on ...field.Expr) IDonationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDonationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDonationDo
	Group(cols ...field.Expr) IDonationDo
	Having(conds ...gen.Condition) IDonationDo
	Limit(limit int) IDonationDo
	Offset(offset int) IDonationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDonationDo
	Unscoped() IDonationDo
	Create(values ...*entities.Donation) error
	CreateInBatches(values []*entities.Donation, batchSize int) error
	Save(values ...*entities.Donation) error
	First() (*entities.Donation, error)
	Take() (*entities.Donation, error)
	Last() (*entities.Donation, error)
	Find() ([]*entities.Donation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Donation, err error)
	FindInBatches(result *[]*entities.Donation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.Donation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDonationDo
	Assign(attrs ...field.AssignExpr) IDonationDo
	Joins(fields ...field.RelationField) IDonationDo
	Preload(fields ...field.RelationField) IDonationDo
	FirstOrInit() (*entities.Donation, error)
	FirstOrCreate() (*entities.Donation, error)
	FindByPage(offset int, limit int) (result []*entities.Donation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDonationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d donationDo) Debug() IDonationDo {
	return d.withDO(d.DO.Debug())
}

func (d donationDo) WithContext(ctx context.Context) IDonationDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d donationDo) ReadDB() IDonationDo {
	return d.Clauses(dbresolver.Read)
}

func (d donationDo) WriteDB() IDonationDo {
	return d.Clauses(dbresolver.Write)
}

func (d donationDo) Session(config *gorm.Session) IDonationDo {
	return d.withDO(d.DO.Session(config))
}

func (d donationDo) Clauses(conds ...clause.Expression) IDonationDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d donationDo) Returning(value interface{}, columns ...string) IDonationDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d donationDo) Not(conds ...gen.Condition) IDonationDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d donationDo) Or(conds ...gen.Condition) IDonationDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d donationDo) Select(conds ...field.Expr) IDonationDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d donationDo) Where(conds ...gen.Condition) IDonationDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d donationDo) Order(conds ...field.Expr) IDonationDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d donationDo) Distinct(cols ...field.Expr) IDonationDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d donationDo) Omit(cols ...field.Expr) IDonationDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d donationDo) Join(table schema.Tabler, on ...field.Expr) IDonationDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d donationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDonationDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d donationDo) RightJoin(table schema.Tabler, on ...field.Expr) IDonationDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d donationDo) Group(cols ...field.Expr) IDonationDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d donationDo) Having(conds ...gen.Condition) IDonationDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d donationDo) Limit(limit int) IDonationDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d donationDo) Offset(offset int) IDonationDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d donationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDonationDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d donationDo) Unscoped() IDonationDo {
	return d.withDO(d.DO.Unscoped())
}

func (d donationDo) Create(values ...*entities.Donation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d donationDo) CreateInBatches(values []*entities.Donation, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d donationDo) Save(values ...*entities.Donation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d donationDo) First() (*entities.Donation, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Donation), nil
	}
}

func (d donationDo) Take() (*entities.Donation, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Donation), nil
	}
}

func (d donationDo) Last() (*entities.Donation, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Donation), nil
	}
}

func (d donationDo) Find() ([]*entities.Donation, error) {
	result, err := d.DO.Find()
	return result.([]*entities.Donation), err
}

func (d donationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Donation, err error) {
	buf := make([]*entities.Donation, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d donationDo) FindInBatches(result *[]*entities.Donation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d donationDo) Attrs(attrs ...field.AssignExpr) IDonationDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d donationDo) Assign(attrs ...field.AssignExpr) IDonationDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d donationDo) Joins(fields ...field.RelationField) IDonationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d donationDo) Preload(fields ...field.RelationField) IDonationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d donationDo) FirstOrInit() (*entities.Donation, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Donation), nil
	}
}

func (d donationDo) FirstOrCreate() (*entities.Donation, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Donation), nil
	}
}

func (d donationDo) FindByPage(offset int, limit int) (result []*entities.Donation, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d donationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d donationDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d donationDo) Delete(models ...*entities.Donation) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *donationDo) withDO(do gen.Dao) *donationDo {
	d.DO = *do.(*gen.DO)
	return d
}
