// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ximanager/sources/persistence/entities"
)

func newBan(db *gorm.DB, opts ...gen.DOOption) ban {
	_ban := ban{}

	_ban.banDo.UseDB(db, opts...)
	_ban.banDo.UseModel(&entities.Ban{})

	tableName := _ban.banDo.TableName()
	_ban.ALL = field.NewAsterisk(tableName)
	_ban.ID = field.NewField(tableName, "id")
	_ban.UserID = field.NewField(tableName, "user_id")
	_ban.Reason = field.NewString(tableName, "reason")
	_ban.Duration = field.NewString(tableName, "duration")
	_ban.BannedAt = field.NewTime(tableName, "banned_at")
	_ban.BannedWhere = field.NewInt64(tableName, "banned_where")
	_ban.CreatedAt = field.NewTime(tableName, "created_at")
	_ban.User = banHasOneUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entities.User"),
		Messages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Messages", "entities.Message"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Messages.User", "entities.User"),
			},
		},
		Donations: struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Donations", "entities.Donation"),
			UserEntity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Donations.UserEntity", "entities.User"),
			},
		},
		CreatedModes: struct {
			field.RelationField
			Creator struct {
				field.RelationField
			}
			SelectedModes struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("User.CreatedModes", "entities.Mode"),
			Creator: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.CreatedModes.Creator", "entities.User"),
			},
			SelectedModes: struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("User.CreatedModes.SelectedModes", "entities.SelectedMode"),
				Mode: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.Mode", "entities.Mode"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.User", "entities.User"),
				},
			},
		},
		SelectedModes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.SelectedModes", "entities.SelectedMode"),
		},
		Pins: struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Pins", "entities.Pin"),
			UserEntity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Pins.UserEntity", "entities.User"),
			},
		},
		Usages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Usages", "entities.Usage"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Usages.User", "entities.User"),
			},
		},
		Bans: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Bans", "entities.Ban"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Bans.User", "entities.User"),
			},
		},
	}

	_ban.fillFieldMap()

	return _ban
}

type ban struct {
	banDo banDo

	ALL         field.Asterisk
	ID          field.Field
	UserID      field.Field
	Reason      field.String
	Duration    field.String
	BannedAt    field.Time
	BannedWhere field.Int64
	CreatedAt   field.Time
	User        banHasOneUser

	fieldMap map[string]field.Expr
}

func (b ban) Table(newTableName string) *ban {
	b.banDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b ban) As(alias string) *ban {
	b.banDo.DO = *(b.banDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *ban) updateTableName(table string) *ban {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewField(table, "id")
	b.UserID = field.NewField(table, "user_id")
	b.Reason = field.NewString(table, "reason")
	b.Duration = field.NewString(table, "duration")
	b.BannedAt = field.NewTime(table, "banned_at")
	b.BannedWhere = field.NewInt64(table, "banned_where")
	b.CreatedAt = field.NewTime(table, "created_at")

	b.fillFieldMap()

	return b
}

func (b *ban) WithContext(ctx context.Context) IBanDo { return b.banDo.WithContext(ctx) }

func (b ban) TableName() string { return b.banDo.TableName() }

func (b ban) Alias() string { return b.banDo.Alias() }

func (b ban) Columns(cols ...field.Expr) gen.Columns { return b.banDo.Columns(cols...) }

func (b *ban) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *ban) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["id"] = b.ID
	b.fieldMap["user_id"] = b.UserID
	b.fieldMap["reason"] = b.Reason
	b.fieldMap["duration"] = b.Duration
	b.fieldMap["banned_at"] = b.BannedAt
	b.fieldMap["banned_where"] = b.BannedWhere
	b.fieldMap["created_at"] = b.CreatedAt

}

func (b ban) clone(db *gorm.DB) ban {
	b.banDo.ReplaceConnPool(db.Statement.ConnPool)
	b.User.db = db.Session(&gorm.Session{Initialized: true})
	b.User.db.Statement.ConnPool = db.Statement.ConnPool
	return b
}

func (b ban) replaceDB(db *gorm.DB) ban {
	b.banDo.ReplaceDB(db)
	b.User.db = db.Session(&gorm.Session{})
	return b
}

type banHasOneUser struct {
	db *gorm.DB

	field.RelationField

	Messages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Donations struct {
		field.RelationField
		UserEntity struct {
			field.RelationField
		}
	}
	CreatedModes struct {
		field.RelationField
		Creator struct {
			field.RelationField
		}
		SelectedModes struct {
			field.RelationField
			Mode struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
	}
	SelectedModes struct {
		field.RelationField
	}
	Pins struct {
		field.RelationField
		UserEntity struct {
			field.RelationField
		}
	}
	Usages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Bans struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a banHasOneUser) Where(conds ...field.Expr) *banHasOneUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a banHasOneUser) WithContext(ctx context.Context) *banHasOneUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a banHasOneUser) Session(session *gorm.Session) *banHasOneUser {
	a.db = a.db.Session(session)
	return &a
}

func (a banHasOneUser) Model(m *entities.Ban) *banHasOneUserTx {
	return &banHasOneUserTx{a.db.Model(m).Association(a.Name())}
}

func (a banHasOneUser) Unscoped() *banHasOneUser {
	a.db = a.db.Unscoped()
	return &a
}

type banHasOneUserTx struct{ tx *gorm.Association }

func (a banHasOneUserTx) Find() (result *entities.User, err error) {
	return result, a.tx.Find(&result)
}

func (a banHasOneUserTx) Append(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a banHasOneUserTx) Replace(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a banHasOneUserTx) Delete(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a banHasOneUserTx) Clear() error {
	return a.tx.Clear()
}

func (a banHasOneUserTx) Count() int64 {
	return a.tx.Count()
}

func (a banHasOneUserTx) Unscoped() *banHasOneUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type banDo struct{ gen.DO }

type IBanDo interface {
	gen.SubQuery
	Debug() IBanDo
	WithContext(ctx context.Context) IBanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBanDo
	WriteDB() IBanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBanDo
	Not(conds ...gen.Condition) IBanDo
	Or(conds ...gen.Condition) IBanDo
	Select(conds ...field.Expr) IBanDo
	Where(conds ...gen.Condition) IBanDo
	Order(conds ...field.Expr) IBanDo
	Distinct(cols ...field.Expr) IBanDo
	Omit(cols ...field.Expr) IBanDo
	Join(table schema.Tabler, on ...field.Expr) IBanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBanDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBanDo
	Group(cols ...field.Expr) IBanDo
	Having(conds ...gen.Condition) IBanDo
	Limit(limit int) IBanDo
	Offset(offset int) IBanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBanDo
	Unscoped() IBanDo
	Create(values ...*entities.Ban) error
	CreateInBatches(values []*entities.Ban, batchSize int) error
	Save(values ...*entities.Ban) error
	First() (*entities.Ban, error)
	Take() (*entities.Ban, error)
	Last() (*entities.Ban, error)
	Find() ([]*entities.Ban, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Ban, err error)
	FindInBatches(result *[]*entities.Ban, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.Ban) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBanDo
	Assign(attrs ...field.AssignExpr) IBanDo
	Joins(fields ...field.RelationField) IBanDo
	Preload(fields ...field.RelationField) IBanDo
	FirstOrInit() (*entities.Ban, error)
	FirstOrCreate() (*entities.Ban, error)
	FindByPage(offset int, limit int) (result []*entities.Ban, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b banDo) Debug() IBanDo {
	return b.withDO(b.DO.Debug())
}

func (b banDo) WithContext(ctx context.Context) IBanDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b banDo) ReadDB() IBanDo {
	return b.Clauses(dbresolver.Read)
}

func (b banDo) WriteDB() IBanDo {
	return b.Clauses(dbresolver.Write)
}

func (b banDo) Session(config *gorm.Session) IBanDo {
	return b.withDO(b.DO.Session(config))
}

func (b banDo) Clauses(conds ...clause.Expression) IBanDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b banDo) Returning(value interface{}, columns ...string) IBanDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b banDo) Not(conds ...gen.Condition) IBanDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b banDo) Or(conds ...gen.Condition) IBanDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b banDo) Select(conds ...field.Expr) IBanDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b banDo) Where(conds ...gen.Condition) IBanDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b banDo) Order(conds ...field.Expr) IBanDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b banDo) Distinct(cols ...field.Expr) IBanDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b banDo) Omit(cols ...field.Expr) IBanDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b banDo) Join(table schema.Tabler, on ...field.Expr) IBanDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b banDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBanDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b banDo) RightJoin(table schema.Tabler, on ...field.Expr) IBanDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b banDo) Group(cols ...field.Expr) IBanDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b banDo) Having(conds ...gen.Condition) IBanDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b banDo) Limit(limit int) IBanDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b banDo) Offset(offset int) IBanDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b banDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBanDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b banDo) Unscoped() IBanDo {
	return b.withDO(b.DO.Unscoped())
}

func (b banDo) Create(values ...*entities.Ban) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b banDo) CreateInBatches(values []*entities.Ban, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b banDo) Save(values ...*entities.Ban) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b banDo) First() (*entities.Ban, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Ban), nil
	}
}

func (b banDo) Take() (*entities.Ban, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Ban), nil
	}
}

func (b banDo) Last() (*entities.Ban, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Ban), nil
	}
}

func (b banDo) Find() ([]*entities.Ban, error) {
	result, err := b.DO.Find()
	return result.([]*entities.Ban), err
}

func (b banDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Ban, err error) {
	buf := make([]*entities.Ban, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b banDo) FindInBatches(result *[]*entities.Ban, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b banDo) Attrs(attrs ...field.AssignExpr) IBanDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b banDo) Assign(attrs ...field.AssignExpr) IBanDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b banDo) Joins(fields ...field.RelationField) IBanDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b banDo) Preload(fields ...field.RelationField) IBanDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b banDo) FirstOrInit() (*entities.Ban, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Ban), nil
	}
}

func (b banDo) FirstOrCreate() (*entities.Ban, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Ban), nil
	}
}

func (b banDo) FindByPage(offset int, limit int) (result []*entities.Ban, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b banDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b banDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b banDo) Delete(models ...*entities.Ban) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *banDo) withDO(do gen.Dao) *banDo {
	b.DO = *do.(*gen.DO)
	return b
}
