// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ximanager/sources/persistence/entities"
)

func newPersonalization(db *gorm.DB, opts ...gen.DOOption) personalization {
	_personalization := personalization{}

	_personalization.personalizationDo.UseDB(db, opts...)
	_personalization.personalizationDo.UseModel(&entities.Personalization{})

	tableName := _personalization.personalizationDo.TableName()
	_personalization.ALL = field.NewAsterisk(tableName)
	_personalization.ID = field.NewField(tableName, "id")
	_personalization.UserID = field.NewField(tableName, "user_id")
	_personalization.Prompt = field.NewString(tableName, "prompt")
	_personalization.CreatedAt = field.NewTime(tableName, "created_at")
	_personalization.UpdatedAt = field.NewTime(tableName, "updated_at")
	_personalization.User = personalizationHasOneUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entities.User"),
		Messages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Messages", "entities.Message"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Messages.User", "entities.User"),
			},
		},
		Donations: struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Donations", "entities.Donation"),
			UserEntity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Donations.UserEntity", "entities.User"),
			},
		},
		CreatedModes: struct {
			field.RelationField
			Creator struct {
				field.RelationField
			}
			SelectedModes struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("User.CreatedModes", "entities.Mode"),
			Creator: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.CreatedModes.Creator", "entities.User"),
			},
			SelectedModes: struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("User.CreatedModes.SelectedModes", "entities.SelectedMode"),
				Mode: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.Mode", "entities.Mode"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.CreatedModes.SelectedModes.User", "entities.User"),
				},
			},
		},
		SelectedModes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.SelectedModes", "entities.SelectedMode"),
		},
		Personalizations: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Personalizations", "entities.Personalization"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Personalizations.User", "entities.User"),
			},
		},
		Usages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Usages", "entities.Usage"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Usages.User", "entities.User"),
			},
		},
		Bans: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Bans", "entities.Ban"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Bans.User", "entities.User"),
			},
		},
	}

	_personalization.fillFieldMap()

	return _personalization
}

type personalization struct {
	personalizationDo personalizationDo

	ALL       field.Asterisk
	ID        field.Field
	UserID    field.Field
	Prompt    field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	User      personalizationHasOneUser

	fieldMap map[string]field.Expr
}

func (p personalization) Table(newTableName string) *personalization {
	p.personalizationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personalization) As(alias string) *personalization {
	p.personalizationDo.DO = *(p.personalizationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personalization) updateTableName(table string) *personalization {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewField(table, "id")
	p.UserID = field.NewField(table, "user_id")
	p.Prompt = field.NewString(table, "prompt")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *personalization) WithContext(ctx context.Context) IPersonalizationDo {
	return p.personalizationDo.WithContext(ctx)
}

func (p personalization) TableName() string { return p.personalizationDo.TableName() }

func (p personalization) Alias() string { return p.personalizationDo.Alias() }

func (p personalization) Columns(cols ...field.Expr) gen.Columns {
	return p.personalizationDo.Columns(cols...)
}

func (p *personalization) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personalization) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["prompt"] = p.Prompt
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt

}

func (p personalization) clone(db *gorm.DB) personalization {
	p.personalizationDo.ReplaceConnPool(db.Statement.ConnPool)
	p.User.db = db.Session(&gorm.Session{Initialized: true})
	p.User.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p personalization) replaceDB(db *gorm.DB) personalization {
	p.personalizationDo.ReplaceDB(db)
	p.User.db = db.Session(&gorm.Session{})
	return p
}

type personalizationHasOneUser struct {
	db *gorm.DB

	field.RelationField

	Messages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Donations struct {
		field.RelationField
		UserEntity struct {
			field.RelationField
		}
	}
	CreatedModes struct {
		field.RelationField
		Creator struct {
			field.RelationField
		}
		SelectedModes struct {
			field.RelationField
			Mode struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
	}
	SelectedModes struct {
		field.RelationField
	}
	Personalizations struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Usages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Bans struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
}

func (a personalizationHasOneUser) Where(conds ...field.Expr) *personalizationHasOneUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a personalizationHasOneUser) WithContext(ctx context.Context) *personalizationHasOneUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a personalizationHasOneUser) Session(session *gorm.Session) *personalizationHasOneUser {
	a.db = a.db.Session(session)
	return &a
}

func (a personalizationHasOneUser) Model(m *entities.Personalization) *personalizationHasOneUserTx {
	return &personalizationHasOneUserTx{a.db.Model(m).Association(a.Name())}
}

func (a personalizationHasOneUser) Unscoped() *personalizationHasOneUser {
	a.db = a.db.Unscoped()
	return &a
}

type personalizationHasOneUserTx struct{ tx *gorm.Association }

func (a personalizationHasOneUserTx) Find() (result *entities.User, err error) {
	return result, a.tx.Find(&result)
}

func (a personalizationHasOneUserTx) Append(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a personalizationHasOneUserTx) Replace(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a personalizationHasOneUserTx) Delete(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a personalizationHasOneUserTx) Clear() error {
	return a.tx.Clear()
}

func (a personalizationHasOneUserTx) Count() int64 {
	return a.tx.Count()
}

func (a personalizationHasOneUserTx) Unscoped() *personalizationHasOneUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type personalizationDo struct{ gen.DO }

type IPersonalizationDo interface {
	gen.SubQuery
	Debug() IPersonalizationDo
	WithContext(ctx context.Context) IPersonalizationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPersonalizationDo
	WriteDB() IPersonalizationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPersonalizationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPersonalizationDo
	Not(conds ...gen.Condition) IPersonalizationDo
	Or(conds ...gen.Condition) IPersonalizationDo
	Select(conds ...field.Expr) IPersonalizationDo
	Where(conds ...gen.Condition) IPersonalizationDo
	Order(conds ...field.Expr) IPersonalizationDo
	Distinct(cols ...field.Expr) IPersonalizationDo
	Omit(cols ...field.Expr) IPersonalizationDo
	Join(table schema.Tabler, on ...field.Expr) IPersonalizationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalizationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPersonalizationDo
	Group(cols ...field.Expr) IPersonalizationDo
	Having(conds ...gen.Condition) IPersonalizationDo
	Limit(limit int) IPersonalizationDo
	Offset(offset int) IPersonalizationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalizationDo
	Unscoped() IPersonalizationDo
	Create(values ...*entities.Personalization) error
	CreateInBatches(values []*entities.Personalization, batchSize int) error
	Save(values ...*entities.Personalization) error
	First() (*entities.Personalization, error)
	Take() (*entities.Personalization, error)
	Last() (*entities.Personalization, error)
	Find() ([]*entities.Personalization, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Personalization, err error)
	FindInBatches(result *[]*entities.Personalization, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.Personalization) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPersonalizationDo
	Assign(attrs ...field.AssignExpr) IPersonalizationDo
	Joins(fields ...field.RelationField) IPersonalizationDo
	Preload(fields ...field.RelationField) IPersonalizationDo
	FirstOrInit() (*entities.Personalization, error)
	FirstOrCreate() (*entities.Personalization, error)
	FindByPage(offset int, limit int) (result []*entities.Personalization, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPersonalizationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p personalizationDo) Debug() IPersonalizationDo {
	return p.withDO(p.DO.Debug())
}

func (p personalizationDo) WithContext(ctx context.Context) IPersonalizationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personalizationDo) ReadDB() IPersonalizationDo {
	return p.Clauses(dbresolver.Read)
}

func (p personalizationDo) WriteDB() IPersonalizationDo {
	return p.Clauses(dbresolver.Write)
}

func (p personalizationDo) Session(config *gorm.Session) IPersonalizationDo {
	return p.withDO(p.DO.Session(config))
}

func (p personalizationDo) Clauses(conds ...clause.Expression) IPersonalizationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personalizationDo) Returning(value interface{}, columns ...string) IPersonalizationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personalizationDo) Not(conds ...gen.Condition) IPersonalizationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personalizationDo) Or(conds ...gen.Condition) IPersonalizationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personalizationDo) Select(conds ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personalizationDo) Where(conds ...gen.Condition) IPersonalizationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personalizationDo) Order(conds ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personalizationDo) Distinct(cols ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personalizationDo) Omit(cols ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personalizationDo) Join(table schema.Tabler, on ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personalizationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personalizationDo) RightJoin(table schema.Tabler, on ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personalizationDo) Group(cols ...field.Expr) IPersonalizationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personalizationDo) Having(conds ...gen.Condition) IPersonalizationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personalizationDo) Limit(limit int) IPersonalizationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personalizationDo) Offset(offset int) IPersonalizationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personalizationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPersonalizationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personalizationDo) Unscoped() IPersonalizationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personalizationDo) Create(values ...*entities.Personalization) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personalizationDo) CreateInBatches(values []*entities.Personalization, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personalizationDo) Save(values ...*entities.Personalization) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personalizationDo) First() (*entities.Personalization, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Personalization), nil
	}
}

func (p personalizationDo) Take() (*entities.Personalization, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Personalization), nil
	}
}

func (p personalizationDo) Last() (*entities.Personalization, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Personalization), nil
	}
}

func (p personalizationDo) Find() ([]*entities.Personalization, error) {
	result, err := p.DO.Find()
	return result.([]*entities.Personalization), err
}

func (p personalizationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Personalization, err error) {
	buf := make([]*entities.Personalization, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personalizationDo) FindInBatches(result *[]*entities.Personalization, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personalizationDo) Attrs(attrs ...field.AssignExpr) IPersonalizationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personalizationDo) Assign(attrs ...field.AssignExpr) IPersonalizationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personalizationDo) Joins(fields ...field.RelationField) IPersonalizationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personalizationDo) Preload(fields ...field.RelationField) IPersonalizationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personalizationDo) FirstOrInit() (*entities.Personalization, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Personalization), nil
	}
}

func (p personalizationDo) FirstOrCreate() (*entities.Personalization, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Personalization), nil
	}
}

func (p personalizationDo) FindByPage(offset int, limit int) (result []*entities.Personalization, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personalizationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personalizationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personalizationDo) Delete(models ...*entities.Personalization) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personalizationDo) withDO(do gen.Dao) *personalizationDo {
	p.DO = *do.(*gen.DO)
	return p
}
