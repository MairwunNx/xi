// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ximanager/sources/persistence/entities"
)

func newSelectedMode(db *gorm.DB, opts ...gen.DOOption) selectedMode {
	_selectedMode := selectedMode{}

	_selectedMode.selectedModeDo.UseDB(db, opts...)
	_selectedMode.selectedModeDo.UseModel(&entities.SelectedMode{})

	tableName := _selectedMode.selectedModeDo.TableName()
	_selectedMode.ALL = field.NewAsterisk(tableName)
	_selectedMode.ID = field.NewField(tableName, "id")
	_selectedMode.ChatID = field.NewInt64(tableName, "chat_id")
	_selectedMode.ModeID = field.NewField(tableName, "mode_id")
	_selectedMode.SwitchedAt = field.NewTime(tableName, "switched_at")
	_selectedMode.SwitchedBy = field.NewField(tableName, "switched_by")
	_selectedMode.Mode = selectedModeBelongsToMode{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Mode", "entities.Mode"),
		Creator: struct {
			field.RelationField
			Messages struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}
			Donations struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
			}
			CreatedModes struct {
				field.RelationField
			}
			SelectedModes struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
			Pins struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
			}
			Usages struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Mode.Creator", "entities.User"),
			Messages: struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Mode.Creator.Messages", "entities.Message"),
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Mode.Creator.Messages.User", "entities.User"),
				},
			},
			Donations: struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Mode.Creator.Donations", "entities.Donation"),
				UserEntity: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Mode.Creator.Donations.UserEntity", "entities.User"),
				},
			},
			CreatedModes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Mode.Creator.CreatedModes", "entities.Mode"),
			},
			SelectedModes: struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Mode.Creator.SelectedModes", "entities.SelectedMode"),
				Mode: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Mode.Creator.SelectedModes.Mode", "entities.Mode"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Mode.Creator.SelectedModes.User", "entities.User"),
				},
			},
			Pins: struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Mode.Creator.Pins", "entities.Pin"),
				UserEntity: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Mode.Creator.Pins.UserEntity", "entities.User"),
				},
			},
			Usages: struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Mode.Creator.Usages", "entities.Usage"),
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Mode.Creator.Usages.User", "entities.User"),
				},
			},
		},
		SelectedModes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Mode.SelectedModes", "entities.SelectedMode"),
		},
	}

	_selectedMode.User = selectedModeBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entities.User"),
	}

	_selectedMode.fillFieldMap()

	return _selectedMode
}

type selectedMode struct {
	selectedModeDo selectedModeDo

	ALL        field.Asterisk
	ID         field.Field
	ChatID     field.Int64
	ModeID     field.Field
	SwitchedAt field.Time
	SwitchedBy field.Field
	Mode       selectedModeBelongsToMode

	User selectedModeBelongsToUser

	fieldMap map[string]field.Expr
}

func (s selectedMode) Table(newTableName string) *selectedMode {
	s.selectedModeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s selectedMode) As(alias string) *selectedMode {
	s.selectedModeDo.DO = *(s.selectedModeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *selectedMode) updateTableName(table string) *selectedMode {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.ChatID = field.NewInt64(table, "chat_id")
	s.ModeID = field.NewField(table, "mode_id")
	s.SwitchedAt = field.NewTime(table, "switched_at")
	s.SwitchedBy = field.NewField(table, "switched_by")

	s.fillFieldMap()

	return s
}

func (s *selectedMode) WithContext(ctx context.Context) ISelectedModeDo {
	return s.selectedModeDo.WithContext(ctx)
}

func (s selectedMode) TableName() string { return s.selectedModeDo.TableName() }

func (s selectedMode) Alias() string { return s.selectedModeDo.Alias() }

func (s selectedMode) Columns(cols ...field.Expr) gen.Columns {
	return s.selectedModeDo.Columns(cols...)
}

func (s *selectedMode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *selectedMode) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["chat_id"] = s.ChatID
	s.fieldMap["mode_id"] = s.ModeID
	s.fieldMap["switched_at"] = s.SwitchedAt
	s.fieldMap["switched_by"] = s.SwitchedBy

}

func (s selectedMode) clone(db *gorm.DB) selectedMode {
	s.selectedModeDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Mode.db = db.Session(&gorm.Session{Initialized: true})
	s.Mode.db.Statement.ConnPool = db.Statement.ConnPool
	s.User.db = db.Session(&gorm.Session{Initialized: true})
	s.User.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s selectedMode) replaceDB(db *gorm.DB) selectedMode {
	s.selectedModeDo.ReplaceDB(db)
	s.Mode.db = db.Session(&gorm.Session{})
	s.User.db = db.Session(&gorm.Session{})
	return s
}

type selectedModeBelongsToMode struct {
	db *gorm.DB

	field.RelationField

	Creator struct {
		field.RelationField
		Messages struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}
		Donations struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}
		CreatedModes struct {
			field.RelationField
		}
		SelectedModes struct {
			field.RelationField
			Mode struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
		Pins struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}
		Usages struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}
	}
	SelectedModes struct {
		field.RelationField
	}
}

func (a selectedModeBelongsToMode) Where(conds ...field.Expr) *selectedModeBelongsToMode {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a selectedModeBelongsToMode) WithContext(ctx context.Context) *selectedModeBelongsToMode {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a selectedModeBelongsToMode) Session(session *gorm.Session) *selectedModeBelongsToMode {
	a.db = a.db.Session(session)
	return &a
}

func (a selectedModeBelongsToMode) Model(m *entities.SelectedMode) *selectedModeBelongsToModeTx {
	return &selectedModeBelongsToModeTx{a.db.Model(m).Association(a.Name())}
}

func (a selectedModeBelongsToMode) Unscoped() *selectedModeBelongsToMode {
	a.db = a.db.Unscoped()
	return &a
}

type selectedModeBelongsToModeTx struct{ tx *gorm.Association }

func (a selectedModeBelongsToModeTx) Find() (result *entities.Mode, err error) {
	return result, a.tx.Find(&result)
}

func (a selectedModeBelongsToModeTx) Append(values ...*entities.Mode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a selectedModeBelongsToModeTx) Replace(values ...*entities.Mode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a selectedModeBelongsToModeTx) Delete(values ...*entities.Mode) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a selectedModeBelongsToModeTx) Clear() error {
	return a.tx.Clear()
}

func (a selectedModeBelongsToModeTx) Count() int64 {
	return a.tx.Count()
}

func (a selectedModeBelongsToModeTx) Unscoped() *selectedModeBelongsToModeTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type selectedModeBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a selectedModeBelongsToUser) Where(conds ...field.Expr) *selectedModeBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a selectedModeBelongsToUser) WithContext(ctx context.Context) *selectedModeBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a selectedModeBelongsToUser) Session(session *gorm.Session) *selectedModeBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a selectedModeBelongsToUser) Model(m *entities.SelectedMode) *selectedModeBelongsToUserTx {
	return &selectedModeBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a selectedModeBelongsToUser) Unscoped() *selectedModeBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type selectedModeBelongsToUserTx struct{ tx *gorm.Association }

func (a selectedModeBelongsToUserTx) Find() (result *entities.User, err error) {
	return result, a.tx.Find(&result)
}

func (a selectedModeBelongsToUserTx) Append(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a selectedModeBelongsToUserTx) Replace(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a selectedModeBelongsToUserTx) Delete(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a selectedModeBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a selectedModeBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a selectedModeBelongsToUserTx) Unscoped() *selectedModeBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type selectedModeDo struct{ gen.DO }

type ISelectedModeDo interface {
	gen.SubQuery
	Debug() ISelectedModeDo
	WithContext(ctx context.Context) ISelectedModeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISelectedModeDo
	WriteDB() ISelectedModeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISelectedModeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISelectedModeDo
	Not(conds ...gen.Condition) ISelectedModeDo
	Or(conds ...gen.Condition) ISelectedModeDo
	Select(conds ...field.Expr) ISelectedModeDo
	Where(conds ...gen.Condition) ISelectedModeDo
	Order(conds ...field.Expr) ISelectedModeDo
	Distinct(cols ...field.Expr) ISelectedModeDo
	Omit(cols ...field.Expr) ISelectedModeDo
	Join(table schema.Tabler, on ...field.Expr) ISelectedModeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISelectedModeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISelectedModeDo
	Group(cols ...field.Expr) ISelectedModeDo
	Having(conds ...gen.Condition) ISelectedModeDo
	Limit(limit int) ISelectedModeDo
	Offset(offset int) ISelectedModeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISelectedModeDo
	Unscoped() ISelectedModeDo
	Create(values ...*entities.SelectedMode) error
	CreateInBatches(values []*entities.SelectedMode, batchSize int) error
	Save(values ...*entities.SelectedMode) error
	First() (*entities.SelectedMode, error)
	Take() (*entities.SelectedMode, error)
	Last() (*entities.SelectedMode, error)
	Find() ([]*entities.SelectedMode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.SelectedMode, err error)
	FindInBatches(result *[]*entities.SelectedMode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.SelectedMode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISelectedModeDo
	Assign(attrs ...field.AssignExpr) ISelectedModeDo
	Joins(fields ...field.RelationField) ISelectedModeDo
	Preload(fields ...field.RelationField) ISelectedModeDo
	FirstOrInit() (*entities.SelectedMode, error)
	FirstOrCreate() (*entities.SelectedMode, error)
	FindByPage(offset int, limit int) (result []*entities.SelectedMode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISelectedModeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s selectedModeDo) Debug() ISelectedModeDo {
	return s.withDO(s.DO.Debug())
}

func (s selectedModeDo) WithContext(ctx context.Context) ISelectedModeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s selectedModeDo) ReadDB() ISelectedModeDo {
	return s.Clauses(dbresolver.Read)
}

func (s selectedModeDo) WriteDB() ISelectedModeDo {
	return s.Clauses(dbresolver.Write)
}

func (s selectedModeDo) Session(config *gorm.Session) ISelectedModeDo {
	return s.withDO(s.DO.Session(config))
}

func (s selectedModeDo) Clauses(conds ...clause.Expression) ISelectedModeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s selectedModeDo) Returning(value interface{}, columns ...string) ISelectedModeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s selectedModeDo) Not(conds ...gen.Condition) ISelectedModeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s selectedModeDo) Or(conds ...gen.Condition) ISelectedModeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s selectedModeDo) Select(conds ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s selectedModeDo) Where(conds ...gen.Condition) ISelectedModeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s selectedModeDo) Order(conds ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s selectedModeDo) Distinct(cols ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s selectedModeDo) Omit(cols ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s selectedModeDo) Join(table schema.Tabler, on ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s selectedModeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s selectedModeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s selectedModeDo) Group(cols ...field.Expr) ISelectedModeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s selectedModeDo) Having(conds ...gen.Condition) ISelectedModeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s selectedModeDo) Limit(limit int) ISelectedModeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s selectedModeDo) Offset(offset int) ISelectedModeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s selectedModeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISelectedModeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s selectedModeDo) Unscoped() ISelectedModeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s selectedModeDo) Create(values ...*entities.SelectedMode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s selectedModeDo) CreateInBatches(values []*entities.SelectedMode, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s selectedModeDo) Save(values ...*entities.SelectedMode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s selectedModeDo) First() (*entities.SelectedMode, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.SelectedMode), nil
	}
}

func (s selectedModeDo) Take() (*entities.SelectedMode, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.SelectedMode), nil
	}
}

func (s selectedModeDo) Last() (*entities.SelectedMode, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.SelectedMode), nil
	}
}

func (s selectedModeDo) Find() ([]*entities.SelectedMode, error) {
	result, err := s.DO.Find()
	return result.([]*entities.SelectedMode), err
}

func (s selectedModeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.SelectedMode, err error) {
	buf := make([]*entities.SelectedMode, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s selectedModeDo) FindInBatches(result *[]*entities.SelectedMode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s selectedModeDo) Attrs(attrs ...field.AssignExpr) ISelectedModeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s selectedModeDo) Assign(attrs ...field.AssignExpr) ISelectedModeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s selectedModeDo) Joins(fields ...field.RelationField) ISelectedModeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s selectedModeDo) Preload(fields ...field.RelationField) ISelectedModeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s selectedModeDo) FirstOrInit() (*entities.SelectedMode, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.SelectedMode), nil
	}
}

func (s selectedModeDo) FirstOrCreate() (*entities.SelectedMode, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.SelectedMode), nil
	}
}

func (s selectedModeDo) FindByPage(offset int, limit int) (result []*entities.SelectedMode, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s selectedModeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s selectedModeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s selectedModeDo) Delete(models ...*entities.SelectedMode) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *selectedModeDo) withDO(do gen.Dao) *selectedModeDo {
	s.DO = *do.(*gen.DO)
	return s
}
