// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ximanager/sources/persistence/entities"
)

func newPin(db *gorm.DB, opts ...gen.DOOption) pin {
	_pin := pin{}

	_pin.pinDo.UseDB(db, opts...)
	_pin.pinDo.UseModel(&entities.Pin{})

	tableName := _pin.pinDo.TableName()
	_pin.ALL = field.NewAsterisk(tableName)
	_pin.ID = field.NewField(tableName, "id")
	_pin.ChatID = field.NewInt64(tableName, "chat_id")
	_pin.User = field.NewField(tableName, "user")
	_pin.Message = field.NewString(tableName, "message")
	_pin.CreatedAt = field.NewTime(tableName, "created_at")
	_pin.UserEntity = pinBelongsToUserEntity{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserEntity", "entities.User"),
		Messages: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("UserEntity.Messages", "entities.Message"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("UserEntity.Messages.User", "entities.User"),
			},
		},
		Donations: struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("UserEntity.Donations", "entities.Donation"),
			UserEntity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("UserEntity.Donations.UserEntity", "entities.User"),
			},
		},
		CreatedModes: struct {
			field.RelationField
			Creator struct {
				field.RelationField
			}
			SelectedModes struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("UserEntity.CreatedModes", "entities.Mode"),
			Creator: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("UserEntity.CreatedModes.Creator", "entities.User"),
			},
			SelectedModes: struct {
				field.RelationField
				Mode struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("UserEntity.CreatedModes.SelectedModes", "entities.SelectedMode"),
				Mode: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("UserEntity.CreatedModes.SelectedModes.Mode", "entities.Mode"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("UserEntity.CreatedModes.SelectedModes.User", "entities.User"),
				},
			},
		},
		SelectedModes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("UserEntity.SelectedModes", "entities.SelectedMode"),
		},
		Pins: struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("UserEntity.Pins", "entities.Pin"),
			UserEntity: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("UserEntity.Pins.UserEntity", "entities.User"),
			},
		},
	}

	_pin.fillFieldMap()

	return _pin
}

type pin struct {
	pinDo pinDo

	ALL        field.Asterisk
	ID         field.Field
	ChatID     field.Int64
	User       field.Field
	Message    field.String
	CreatedAt  field.Time
	UserEntity pinBelongsToUserEntity

	fieldMap map[string]field.Expr
}

func (p pin) Table(newTableName string) *pin {
	p.pinDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pin) As(alias string) *pin {
	p.pinDo.DO = *(p.pinDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pin) updateTableName(table string) *pin {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewField(table, "id")
	p.ChatID = field.NewInt64(table, "chat_id")
	p.User = field.NewField(table, "user")
	p.Message = field.NewString(table, "message")
	p.CreatedAt = field.NewTime(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *pin) WithContext(ctx context.Context) IPinDo { return p.pinDo.WithContext(ctx) }

func (p pin) TableName() string { return p.pinDo.TableName() }

func (p pin) Alias() string { return p.pinDo.Alias() }

func (p pin) Columns(cols ...field.Expr) gen.Columns { return p.pinDo.Columns(cols...) }

func (p *pin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pin) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["chat_id"] = p.ChatID
	p.fieldMap["user"] = p.User
	p.fieldMap["message"] = p.Message
	p.fieldMap["created_at"] = p.CreatedAt

}

func (p pin) clone(db *gorm.DB) pin {
	p.pinDo.ReplaceConnPool(db.Statement.ConnPool)
	p.UserEntity.db = db.Session(&gorm.Session{Initialized: true})
	p.UserEntity.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p pin) replaceDB(db *gorm.DB) pin {
	p.pinDo.ReplaceDB(db)
	p.UserEntity.db = db.Session(&gorm.Session{})
	return p
}

type pinBelongsToUserEntity struct {
	db *gorm.DB

	field.RelationField

	Messages struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Donations struct {
		field.RelationField
		UserEntity struct {
			field.RelationField
		}
	}
	CreatedModes struct {
		field.RelationField
		Creator struct {
			field.RelationField
		}
		SelectedModes struct {
			field.RelationField
			Mode struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
	}
	SelectedModes struct {
		field.RelationField
	}
	Pins struct {
		field.RelationField
		UserEntity struct {
			field.RelationField
		}
	}
}

func (a pinBelongsToUserEntity) Where(conds ...field.Expr) *pinBelongsToUserEntity {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pinBelongsToUserEntity) WithContext(ctx context.Context) *pinBelongsToUserEntity {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pinBelongsToUserEntity) Session(session *gorm.Session) *pinBelongsToUserEntity {
	a.db = a.db.Session(session)
	return &a
}

func (a pinBelongsToUserEntity) Model(m *entities.Pin) *pinBelongsToUserEntityTx {
	return &pinBelongsToUserEntityTx{a.db.Model(m).Association(a.Name())}
}

func (a pinBelongsToUserEntity) Unscoped() *pinBelongsToUserEntity {
	a.db = a.db.Unscoped()
	return &a
}

type pinBelongsToUserEntityTx struct{ tx *gorm.Association }

func (a pinBelongsToUserEntityTx) Find() (result *entities.User, err error) {
	return result, a.tx.Find(&result)
}

func (a pinBelongsToUserEntityTx) Append(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pinBelongsToUserEntityTx) Replace(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pinBelongsToUserEntityTx) Delete(values ...*entities.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pinBelongsToUserEntityTx) Clear() error {
	return a.tx.Clear()
}

func (a pinBelongsToUserEntityTx) Count() int64 {
	return a.tx.Count()
}

func (a pinBelongsToUserEntityTx) Unscoped() *pinBelongsToUserEntityTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type pinDo struct{ gen.DO }

type IPinDo interface {
	gen.SubQuery
	Debug() IPinDo
	WithContext(ctx context.Context) IPinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPinDo
	WriteDB() IPinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPinDo
	Not(conds ...gen.Condition) IPinDo
	Or(conds ...gen.Condition) IPinDo
	Select(conds ...field.Expr) IPinDo
	Where(conds ...gen.Condition) IPinDo
	Order(conds ...field.Expr) IPinDo
	Distinct(cols ...field.Expr) IPinDo
	Omit(cols ...field.Expr) IPinDo
	Join(table schema.Tabler, on ...field.Expr) IPinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPinDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPinDo
	Group(cols ...field.Expr) IPinDo
	Having(conds ...gen.Condition) IPinDo
	Limit(limit int) IPinDo
	Offset(offset int) IPinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPinDo
	Unscoped() IPinDo
	Create(values ...*entities.Pin) error
	CreateInBatches(values []*entities.Pin, batchSize int) error
	Save(values ...*entities.Pin) error
	First() (*entities.Pin, error)
	Take() (*entities.Pin, error)
	Last() (*entities.Pin, error)
	Find() ([]*entities.Pin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Pin, err error)
	FindInBatches(result *[]*entities.Pin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entities.Pin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPinDo
	Assign(attrs ...field.AssignExpr) IPinDo
	Joins(fields ...field.RelationField) IPinDo
	Preload(fields ...field.RelationField) IPinDo
	FirstOrInit() (*entities.Pin, error)
	FirstOrCreate() (*entities.Pin, error)
	FindByPage(offset int, limit int) (result []*entities.Pin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pinDo) Debug() IPinDo {
	return p.withDO(p.DO.Debug())
}

func (p pinDo) WithContext(ctx context.Context) IPinDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pinDo) ReadDB() IPinDo {
	return p.Clauses(dbresolver.Read)
}

func (p pinDo) WriteDB() IPinDo {
	return p.Clauses(dbresolver.Write)
}

func (p pinDo) Session(config *gorm.Session) IPinDo {
	return p.withDO(p.DO.Session(config))
}

func (p pinDo) Clauses(conds ...clause.Expression) IPinDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pinDo) Returning(value interface{}, columns ...string) IPinDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pinDo) Not(conds ...gen.Condition) IPinDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pinDo) Or(conds ...gen.Condition) IPinDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pinDo) Select(conds ...field.Expr) IPinDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pinDo) Where(conds ...gen.Condition) IPinDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pinDo) Order(conds ...field.Expr) IPinDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pinDo) Distinct(cols ...field.Expr) IPinDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pinDo) Omit(cols ...field.Expr) IPinDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pinDo) Join(table schema.Tabler, on ...field.Expr) IPinDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pinDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPinDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pinDo) RightJoin(table schema.Tabler, on ...field.Expr) IPinDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pinDo) Group(cols ...field.Expr) IPinDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pinDo) Having(conds ...gen.Condition) IPinDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pinDo) Limit(limit int) IPinDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pinDo) Offset(offset int) IPinDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPinDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pinDo) Unscoped() IPinDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pinDo) Create(values ...*entities.Pin) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pinDo) CreateInBatches(values []*entities.Pin, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pinDo) Save(values ...*entities.Pin) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pinDo) First() (*entities.Pin, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Pin), nil
	}
}

func (p pinDo) Take() (*entities.Pin, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Pin), nil
	}
}

func (p pinDo) Last() (*entities.Pin, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Pin), nil
	}
}

func (p pinDo) Find() ([]*entities.Pin, error) {
	result, err := p.DO.Find()
	return result.([]*entities.Pin), err
}

func (p pinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entities.Pin, err error) {
	buf := make([]*entities.Pin, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pinDo) FindInBatches(result *[]*entities.Pin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pinDo) Attrs(attrs ...field.AssignExpr) IPinDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pinDo) Assign(attrs ...field.AssignExpr) IPinDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pinDo) Joins(fields ...field.RelationField) IPinDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pinDo) Preload(fields ...field.RelationField) IPinDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pinDo) FirstOrInit() (*entities.Pin, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Pin), nil
	}
}

func (p pinDo) FirstOrCreate() (*entities.Pin, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entities.Pin), nil
	}
}

func (p pinDo) FindByPage(offset int, limit int) (result []*entities.Pin, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pinDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pinDo) Delete(models ...*entities.Pin) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pinDo) withDO(do gen.Dao) *pinDo {
	p.DO = *do.(*gen.DO)
	return p
}
