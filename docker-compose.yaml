services:
  ximanager:
    container_name: ximanager
    build: { context: ., dockerfile: Dockerfile }
    networks: [ default ]
    ports:
      - "${OUTSIDERS_STARTUP_PORT}:10000"
      - "${OUTSIDERS_METRICS_PORT}:10001"
    volumes:
      - ${HOME}/data/bots/ximanager:/data
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  postgres:
    image: postgres:16-alpine
    networks: [ default ]
    container_name: ximanager_db
    ports:
      - "${POSTGRES_PORT}:5432"
    env_file: .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ${HOME}/data/bots/ximanager/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  flyway:
    image: flyway/flyway:10-alpine
    container_name: ximanager_flyway
    networks: [ default ]
    env_file: .env
    command: -url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB} -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -connectRetries=60 migrate
    volumes:
      - ./migrations:/flyway/sql
    depends_on:
      postgres:
        condition: service_healthy
  redis:
    image: redis:7-alpine
    container_name: ximanager_redis
    networks: [ default ]
    volumes:
      - ${HOME}/data/bots/ximanager/redis:/data
    user: "0"
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
networks:
  default:
    driver: bridge